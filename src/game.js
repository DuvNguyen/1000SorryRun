const canvas = document.getElementById("gameCanvas");
const ctx = canvas.getContext("2d");

// üìå Set k√≠ch th∆∞·ªõc canvas theo iPhone 11 ngang
canvas.width = 1792;
canvas.height = 828;


// K√≠ch th∆∞·ªõc canvas
canvas.width = 830;
canvas.height = 400;

// Load ·∫£nh n·ªÅn
const bgImage = new Image();
bgImage.src = "assets/background.png";

// Load nh√¢n v·∫≠t (sprite sheet)
const playerImage = new Image();
playerImage.src = "assets/run.png";

// load ·∫£nh c√¥ng ch√∫a
let princessImg = new Image();
princessImg.src = "assets/princess.png";

// Load ch∆∞·ªõng ng·∫°i v·∫≠t
const obstacleImage = new Image();
obstacleImage.src = "assets/Idle.png";

// Bi·∫øn tr·∫°ng th√°i game
let gameOver = false;

// Bi·∫øn t·∫ßn su·∫•t xu·∫•t hi·ªán b·∫´y
let obstacleSpawnRate = 3000; // t·∫ßn su·∫•t ban ƒë·∫ßu l√† 3 gi√¢y m·ªôt ph√°t
const minSpawnRate = 700; // t·∫ßn su·∫•t nhi·ªÅu nh·∫•t l√† 1 gi√¢y m·ªôt ph√°t

// Bi·∫øn t·ªëc ƒë·ªô ch·∫°y c·ªßa b·∫´y
let obstacleSpeed = 3;
const maxObstacleSpeed = 5;

// Bi·∫øn th·∫Øng game
let gameWon = false;

// Th√¥ng tin v·ªÅ nh√¢n v·∫≠t
const player = {
    x: 100,
    y: canvas.height - 40,
    width: 32,
    height: 32,
    frameX: 0,
    frameY: 0,
    speed: 5,
    jumping: false,
    velocityY: 0,
    gravity: 0.4
};

let princess = {
    x: (canvas.width - 40) / 2, // ·ªû gi·ªØa m√†n h√¨nh
    y: canvas.height - 40, // C√πng ƒë·ªô cao v·ªõi nh√¢n v·∫≠t ch√≠nh
    width: 40,
    height: 40,
    frameX: 0,
    frameY: 0,
    visible: false
};


// Hi·ªáu ·ª©ng cu·ªôn n·ªÅn
let bgX1 = 0;
let bgX2 = canvas.width;
const bgSpeed = 2;

// ƒêi·ªÅu ch·ªânh t·ªëc ƒë·ªô animation
let frameIndex = 0;   
let frameDelay = 12;  
let frameCounter = 0; 

// M·∫£ng ch·ª©a ch∆∞·ªõng ng·∫°i v·∫≠t
const obstacles = [];

// T·∫°o ch∆∞·ªõng ng·∫°i v·∫≠t ng·∫´u nhi√™n
function spawnObstacle() {
    if (gameOver) return;

    const obstacle = {
        x: canvas.width,
        y: canvas.height - 40,
        width: 32,
        height: 32,
        speed: obstacleSpeed
    };
    obstacles.push(obstacle);

    setTimeout(spawnObstacle, Math.random() * obstacleSpawnRate + obstacleSpawnRate); 
}


// ch·ªó n√†y m√¨nh s·∫Ω vi·∫øt t√≠nh ƒëi·ªÉm
let score = 0;

// m√¨nh vi·∫øt th√™m h√†m c·∫≠p nh·∫≠t ƒëi·ªÉm theo th·ªùi gian n√®
function updateScore(){
    if(!gameOver){
        score++;
        
        setTimeout(updateScore, 100) // 100ms th√¨ tƒÉng m·ªôt ƒëi·ªÉm
        
        // tƒÉng t·∫ßn su·∫•t xu·∫•t hi·ªán b·∫´y l√™n, nh·ªõ reset t·∫ßn su·∫•t ·ªü h√†m restart
        if(score % 10  === 0 && obstacleSpawnRate > minSpawnRate){
            obstacleSpawnRate -= 200;
            console.log("T·ªëc ƒë·ªô b·∫´y tƒÉng, th·ªùi gian hi·ªán t·∫°i: ", obstacleSpawnRate);
        }
    }
}

// H√†m c·∫≠p nh·∫≠t t·ªëc ƒë·ªô ch∆∞·ªõng ng·∫°i v·∫≠t d·ª±a tr√™n ƒëi·ªÉm s·ªë
function updateObstacleSpeed() {
    obstacleSpeed = 3 + Math.floor(score / 100); // C·ª© m·ªói 10 ƒëi·ªÉm, t·ªëc ƒë·ªô tƒÉng 1 ƒë∆°n v·ªã
}


// Ki·ªÉm tra va ch·∫°m
// üìå ƒêi·ªÅu ch·ªânh hitbox nh√¢n v·∫≠t v√† ch∆∞·ªõng ng·∫°i v·∫≠t
function checkCollision(player, obstacle) {
    let playerHitbox = {
        x: player.x + 5,   // B·ªõt 5px r√¨a tr√°i
        y: player.y + 5,   // B·ªõt 5px r√¨a tr√™n
        width: player.width - 10,  // Gi·∫£m k√≠ch th∆∞·ªõc hitbox
        height: player.height - 10
    };

    let obstacleHitbox = {
        x: obstacle.x + 5,   // L√πi hitbox v√†o trong
        y: obstacle.y + (obstacle.height / 2), // Ch·ªâ t√≠nh va ch·∫°m ph·∫ßn tr√™n c·ªßa gai
        width: obstacle.width - 10,
        height: obstacle.height / 2 // Ch·ªâ l·∫•y n·ª≠a tr√™n ƒë·ªÉ tr√°nh l·ªói
    };

    return (
        playerHitbox.x < obstacleHitbox.x + obstacleHitbox.width &&
        playerHitbox.x + playerHitbox.width > obstacleHitbox.x &&
        playerHitbox.y < obstacleHitbox.y + obstacleHitbox.height &&
        playerHitbox.y + playerHitbox.height > obstacleHitbox.y
    );
}


function showWinMessage() {
    ctx.fillStyle = "black"; // M√†u n√¢u gi·ªëng m·ª±c vi·∫øt th∆∞
    ctx.font = "20px 'Courier New', 'Times New Roman', serif"; // Ch·ªØ th∆∞ ph√°p
    ctx.textAlign = "center"; // CƒÉn gi·ªØa
    
    let message = [
        "Ch√∫c m·ª´ng b·∫°n ƒë√£ ƒë∆∞a ·∫øch t√®o ƒë·∫øn n∆°i anh ·∫•y c·∫ßn ƒë·∫øn!",
        "B·∫°n ƒë√£ v∆∞·ª£t qua m·ªçi th·ª≠ th√°ch",
        "v√† gi√∫p anh ·∫•y g·∫∑p ƒë∆∞·ª£c ng∆∞·ªùi th∆∞∆°ng c·ªßa m√¨nh.",
        "H√†nh tr√¨nh ƒë√£ k·∫øt th√∫c,",
        "nh∆∞ng t√¨nh y√™u c√≤n m√£i.",
        "·∫æch xin l·ªói v√¨ ƒë√£ khi·∫øn c√¥ng ch√∫a hay bu·ªìn nha",
        "Game th√¨ c√πi b·∫Øp nh∆∞ng t√¨nh c·∫£m c·ªßa ·∫øch t√®o th√¨ tuy·ªát v·ªùi",
        "·∫øch t√®o g·ª≠i l·ªùi c·∫£m ∆°n ƒë·∫øn em!", 
        "v√¨ ng∆∞·ªùi ·∫øch y√™u l√† m·ªôt c√¥ g√°i m·∫°nh m·∫Ω! "
    ];

    let x = canvas.width / 2;
    let y = canvas.height / 2 - 50;

    // V·∫Ω t·ª´ng d√≤ng ch·ªØ
    message.forEach((line, index) => {
        ctx.fillText(line, x, y + index * 20);
    });
}


// C·∫≠p nh·∫≠t game
function update() {

    if (score >= 1000 && !gameWon) {
        gameWon = true;
        gameOver = true; // D·ª´ng game ch√≠nh
        princess.visible = true;
        princess.y = player.y; // C√πng ƒë·ªô cao v·ªõi nh√¢n v·∫≠t
        winGameLoop(); // Chuy·ªÉn sang loop th·∫Øng game
        return;
    }
    

    if (gameOver) return;

    // Di chuy·ªÉn n·ªÅn
    bgX1 -= bgSpeed;
    bgX2 -= bgSpeed;

    if (bgX1 + canvas.width <= 0) bgX1 = bgX2 + canvas.width;
    if (bgX2 + canvas.width <= 0) bgX2 = bgX1 + canvas.width;

    // C·∫≠p nh·∫≠t nh·∫£y
    if (player.jumping) {
        player.y += player.velocityY;
        player.velocityY += player.gravity;
        if (player.y >= canvas.height - 40) {
            player.y = canvas.height - 40;
            player.jumping = false;
        }
    }

    // C·∫≠p nh·∫≠t animation
    frameCounter++;
    if (frameCounter >= frameDelay) {
        player.frameX = (player.frameX + 1) % 6;
        frameCounter = 0;
    }

    // c·∫≠p nh·∫≠t t·ªëc ƒë·ªô ch∆∞·ªõng ng·∫°i v·∫≠t
    updateObstacleSpeed();

    // C·∫≠p nh·∫≠t ch∆∞·ªõng ng·∫°i v·∫≠t
    for (let i = 0; i < obstacles.length; i++) {
        obstacles[i].x -= obstacles[i].speed;

        // Ki·ªÉm tra va ch·∫°m
        if (checkCollision(player, obstacles[i])) {
            gameOver = true;
            console.log("üí• Game Over!");

            setTimeout(() => {
                ctx.fillStyle = "#B68D40";  // M√†u n√¢u v√†ng d·ªãu
                ctx.font = "28px 'Baloo 2', sans-serif";
                ctx.textAlign = "center";
                
                // Hi·ªÉn th·ªã "Game Over"
                ctx.fillText("R√≤i xongg, ng·ªèm lu√¥n", canvas.width / 2, canvas.height / 2);
            
                // Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n ch∆°i l·∫°i
                ctx.font = "20px 'Baloo 2', sans-serif";  // Ch·ªØ nh·ªè h∆°n
                ctx.fillStyle = "#D9A066";  // M√†u s√°ng h∆°n ch√∫t
                ctx.fillText("Ch·∫°m m√†n h√¨nh ƒë·ªÉ ch∆°i l·∫°i", canvas.width / 2, canvas.height / 2 + 40);
            }, 100);
            
            return;
        }
    }

    // X√≥a ch∆∞·ªõng ng·∫°i v·∫≠t khi ra kh·ªèi m√†n h√¨nh
    while (obstacles.length > 0 && obstacles[0].x + obstacles[0].width < 0) {
        obstacles.shift();
    }
}

// v·∫Ω ƒëi·ªÉm
function drawScore() {
    ctx.fillStyle = "black"; // M√†u v√†ng ƒë·∫≠m
    ctx.font = "24px 'Baloo 2', sans-serif";
    ctx.textAlign = "left";  // Canh tr√°i
    ctx.fillText(`ƒêi·ªÉm: ${score}`, 20, 30);  // ƒê·∫∑t v·ªã tr√≠ g·∫ßn g√≥c tr√°i tr√™n c√πng
}

// h√†m v·∫Ω c√¥ng ch√∫a
function drawPrincess() {
    if (princess.visible) {
        ctx.save();
        ctx.translate(princess.x + princess.width, princess.y); // Di chuy·ªÉn h·ªá tr·ª•c ƒë·∫øn v·ªã tr√≠ c√¥ng ch√∫a
        ctx.scale(-1, 1); // L·∫≠t ng∆∞·ª£c c√¥ng ch√∫a
        
        ctx.drawImage(
            princessImg,
            princess.frameX * 32, // ƒê·∫£m b·∫£o l·∫•y ƒë√∫ng frame 32x32
            princess.frameY * 32,
            32, 32, // K√≠ch th∆∞·ªõc frame
            -princess.width, 0, // ƒêi·ªÅu ch·ªânh v·ªã tr√≠ do ƒë√£ l·∫≠t
            32, 32 // V·∫Ω v·ªõi k√≠ch th∆∞·ªõc 32x32
        );

        ctx.restore();
    }
}






// V·∫Ω game
function draw() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    
    // V·∫Ω n·ªÅn
    ctx.drawImage(bgImage, bgX1, 0, canvas.width, canvas.height);
    ctx.drawImage(bgImage, bgX2, 0, canvas.width, canvas.height);

    // V·∫Ω nh√¢n v·∫≠t
    ctx.drawImage(
        playerImage,
        player.frameX * player.width,
        player.frameY * player.height,
        player.width,
        player.height,
        player.x,
        player.y,
        player.width,
        player.height
    );
    

    // V·∫Ω ch∆∞·ªõng ng·∫°i v·∫≠t
    for (let obstacle of obstacles) {
        ctx.drawImage(obstacleImage, obstacle.x, obstacle.y, obstacle.width, obstacle.height);
    }
    
    // v·∫Ω ƒëi·ªÉm
    drawScore()
}

// X·ª≠ l√Ω nh·∫£y
function jump() {
    if (!player.jumping) {
        player.jumping = true;
        player.velocityY = -10;
    }
}

// X·ª≠ l√Ω ch·∫°m m√†n h√¨nh (cho ƒëi·ªán tho·∫°i)
function handleTouch() {
    if (gameOver) {
        restartGame(); // N·∫øu game over, ch·∫°m ƒë·ªÉ ch∆°i l·∫°i
    } else {
        jump(); // N·∫øu ƒëang ch∆°i, ch·∫°m ƒë·ªÉ nh·∫£y
    }
}

// Restart game
function restartGame() {
    gameOver = false;
    player.y = canvas.height - 40;
    player.jumping = false;
    player.velocityY = 0;
    player.frameX = 0;
    obstacles.length = 0; // X√≥a h·∫øt ch∆∞·ªõng ng·∫°i v·∫≠t
    score = 0; // C·∫≠p nh·∫≠t l·∫°i ƒëi·ªÉm
    obstacleSpawnRate = 3000;   
    spawnObstacle(); // B·∫Øt ƒë·∫ßu l·∫°i ch∆∞·ªõng ng·∫°i v·∫≠t
    updateScore();
    gameLoop(); // Ch·∫°y l·∫°i game
}


document.addEventListener("keydown", (event) => {
    if (event.code === "Space") {
        handleTouch();
    }
});

// X·ª≠ l√Ω ch·∫°m m√†n h√¨nh cho ƒëi·ªán tho·∫°i
canvas.addEventListener("touchstart", handleTouch);



// h√†m show menu game
function showGameMenu() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    // V·∫Ω n·ªÅn
    ctx.drawImage(bgImage, 0, 0, canvas.width, canvas.height);

    // C·ªët truy·ªán (cƒÉn l·ªÅ tr√°i)
    ctx.fillStyle = "#5C4033"; // M√†u n√¢u gi·ªëng th∆∞ tay
    ctx.font = "22px 'Courier New', 'Times New Roman', serif";
    ctx.textAlign = "left"; // CƒÉn l·ªÅ tr√°i

    let story = [
        "Ng√†y x∆∞a, c√≥ m·ªôt ch√†ng trai d≈©ng c·∫£m,",
        "tr·∫£i qua bao kh√≥ khƒÉn ƒë·ªÉ t√¨m v·ªÅ ng∆∞·ªùi th∆∞∆°ng.",
        "Tr√™n con ƒë∆∞·ªùng ·∫•y, c·∫≠u ph·∫£i v∆∞·ª£t qua",
        "bi·∫øt bao ch∆∞·ªõng ng·∫°i v√† th·ª≠ th√°ch...",
        "",
        "Li·ªáu c·∫≠u c√≥ th·ªÉ v·ªÅ ƒë·∫øn n∆°i?",
        "H√†nh tr√¨nh b·∫Øt ƒë·∫ßu t·ª´ ƒë√¢y!"
    ];

    let x = 50; // CƒÉn l·ªÅ tr√°i
    let y = canvas.height / 3;

    // V·∫Ω t·ª´ng d√≤ng ch·ªØ
    story.forEach((line, index) => {
        ctx.fillText(line, x, y + index * 30);
    });

    // Th√¥ng b√°o b·∫Øt ƒë·∫ßu game
    ctx.font = "24px Arial";
    ctx.fillStyle = "#D32F2F"; // M√†u ƒë·ªè n·ªïi b·∫≠t
    ctx.textAlign = "center";
    ctx.fillText("Nh·∫•n v√†o m√†n h√¨nh ƒë·ªÉ ch∆°i!", canvas.width / 2, canvas.height - 50);

    // Th√™m s·ª± ki·ªán b·∫Øt ƒë·∫ßu game
    canvas.addEventListener("click", startGame, { once: true });
}


// V√≤ng l·∫∑p win game
function winGameLoop() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    // V·∫Ω n·ªÅn
    ctx.drawImage(bgImage, 0, 0, canvas.width, canvas.height);

    // V·∫Ω c√¥ng ch√∫a ·ªü gi·ªØa m√†n h√¨nh
    princess.x = (canvas.width - princess.width) / 2;
    drawPrincess();

    // V·∫Ω nh√¢n v·∫≠t
    ctx.drawImage(
        playerImage,
        player.frameX * player.width,
        player.frameY * player.height,
        player.width,
        player.height,
        player.x,
        player.y,
        player.width,
        player.height
    );

    // N·∫øu nh√¢n v·∫≠t ch∆∞a ƒë·∫øn c√¥ng ch√∫a, ti·∫øp t·ª•c di chuy·ªÉn
    if (player.x < princess.x - player.width / 2) {
        player.x += 1; // ƒêi·ªÅu ch·ªânh t·ªëc ƒë·ªô ch·∫°y
        requestAnimationFrame(winGameLoop);
    } else {
        showWinMessage(); // Hi·ªÉn th·ªã th√¥ng b√°o th·∫Øng
    }
}

// // H√†m game loop
// function gameLoop() {
//     if (!gameOver) {
//         update();
//         draw();
//         requestAnimationFrame(gameLoop);
//     }
// }


// // B·∫Øt ƒë·∫ßu game
// updateScore();
// bgImage.onload = function() {
//     spawnObstacle();
//     gameLoop();
// };

// Bi·∫øn ki·ªÉm tra tr·∫°ng th√°i game
let gameStarted = false;

// H√†m hi·ªÉn th·ªã c·ªët truy·ªán
// H√†m hi·ªÉn th·ªã c·ªët truy·ªán (cƒÉn gi·ªØa)
function drawStoryText() {
    ctx.fillStyle = "black"; // M√†u n√¢u gi·ªëng th∆∞ tay
    ctx.font = "20px 'Courier New', 'Times New Roman', serif";
    ctx.textAlign = "center"; // CƒÉn gi·ªØa theo chi·ªÅu ngang

    let story = [
        "Ng√†y x∆∞a, c√≥ m·ªôt ch√†ng trai y√™u m·ªôt c√¥ g√°i,",
        "M·ªôt ng√†y trong l√∫c chia xa,",
        "ch√†ng ƒë√£ khi·∫øn cho ng∆∞·ªùi m√¨nh y√™u ph·∫£i bu·ªìn",
        "Nh∆∞ ch·ªãu h·∫≠u qu·∫£, ch√†ng b·ªã bi·∫øn th√†nh con ·∫øch",
        "b·ªã ƒëem ƒë·∫øn n∆°i xa t√≠t m√π kh∆°i",
        "B·∫°n h√£y gi√∫p c·∫≠u ·∫•y v∆∞·ª£t ng√†n ch√¥ng gai.",
        "B·∫±ng c√°ch v∆∞·ª£t 1000 ƒëi·ªÉm ƒë·ªÉ v·ªÅ b√™n c√¥ng ch√∫a",
        "v√† d√†nh m·ªôt l·ªùi xin l·ªói ch√¢n th√†nh nh·∫•t...",
        "Li·ªáu anh ·∫•y c√≥ th·ªÉ v∆∞·ª£t qua ƒë∆∞·ª£c h·∫øt ch√¥ng gai?",
        "ƒêi·ªÅu ƒë√≥ l√† nh·ªù b·∫°n! "
    ];

    let x = canvas.width / 2; // CƒÉn gi·ªØa m√†n h√¨nh
    let y = canvas.height / 8; // B·∫Øt ƒë·∫ßu t·ª´ 1/3 m√†n h√¨nh

    // V·∫Ω t·ª´ng d√≤ng ch·ªØ c·ªßa c·ªët truy·ªán
    story.forEach((line, index) => {
        ctx.fillText(line, x, y + index * 30);
    });

    // Th√¥ng b√°o b·∫Øt ƒë·∫ßu game
    ctx.font = "24px Arial";
    ctx.fillStyle = "#D32F2F"; // M√†u ƒë·ªè n·ªïi b·∫≠t
    ctx.fillText("Nh·∫•n v√†o m√†n h√¨nh ƒë·ªÉ b·∫Øt ƒë·∫ßu!", canvas.width / 2, canvas.height - 33);
}



// H√†m hi·ªÉn th·ªã menu game
function showGameMenu() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    // V·∫Ω n·ªÅn
    ctx.drawImage(bgImage, 0, 0, canvas.width, canvas.height);

    drawStoryText();
}

function resizeCanvas() {
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
}

// G·ªçi khi trang t·∫£i ho·∫∑c thay ƒë·ªïi k√≠ch th∆∞·ªõc m√†n h√¨nh
window.addEventListener("resize", resizeCanvas);
resizeCanvas(); // Ch·∫°y ngay khi game kh·ªüi ƒë·ªông


// H√†m b·∫Øt ƒë·∫ßu game
function startGame() {
    if (!gameStarted) {
        gameStarted = true;
        spawnObstacle(); // B·∫Øt ƒë·∫ßu t·∫°o ch∆∞·ªõng ng·∫°i v·∫≠t
        gameLoop(); // Ch·∫°y game

        // X√≥a s·ª± ki·ªán sau khi game ƒë√£ b·∫Øt ƒë·∫ßu
        canvas.removeEventListener("click", startGame);
        canvas.removeEventListener("touchstart", startGame);
    }
}

// H√†m game loop
function gameLoop() {
    if (!gameOver) {
        update();
        draw();
        requestAnimationFrame(gameLoop);
    }
}

// B·∫Øt ƒë·∫ßu b·∫±ng menu game tr∆∞·ªõc
updateScore();
bgImage.onload = function() {
    showGameMenu(); // Hi·ªÉn th·ªã menu tr∆∞·ªõc
};

// L·∫Øng nghe s·ª± ki·ªán click (PC) & touch (Mobile) ƒë·ªÉ b·∫Øt ƒë·∫ßu game
canvas.addEventListener("click", startGame);
canvas.addEventListener("touchstart", startGame);

